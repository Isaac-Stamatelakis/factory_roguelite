//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Misc/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""StandardMovement"",
            ""id"": ""7768c5e0-8ba9-46ff-8f47-7c607b13eee0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cfb5b6ef-cc2a-4235-a7f8-4742c513d387"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fca90552-aec5-429f-9c30-ddcc638d08e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""9e5d4ec9-9eb8-4ad7-8ff3-066a90eea542"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""01b673a6-048d-4e1c-bfa5-52a42db4d36e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54a2bf0c-ee44-486a-aaec-617ee85026aa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8245de48-4285-40b8-aa97-e37b99b3c8a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9297366-a59c-4adf-8694-4fab79f8e242"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""81329860-ec99-4414-a58b-f82dff8503f6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5c0b8185-fec8-458a-b279-f6f85dd414c2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e4f273c3-db16-4fb9-95ac-fd050c638987"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FlightMovement"",
            ""id"": ""ce5c64b6-443c-4fd9-a5ab-ba6029866e86"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b23de7e5-01bc-43b8-9b04-eddfa69ffffd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1d6173f2-d03e-432b-a536-f81d03bc56c4"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""50f2bc6e-7b73-419e-b6a4-84afa5457cbc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""03f65556-1174-4546-8f9c-ac393296b17a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9354a629-d8f4-43a7-a17e-b21342b87294"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3d65a11-73c3-4b66-8e52-995d690258d5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""36ded705-81e8-4a23-ba7c-1c5ad2f2ea20"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ede950f-8918-43f6-896f-edb8ab48335b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c31edede-de0f-40fe-a878-015c87030f3f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ca1ac9be-f669-4d21-923d-55320264fe6a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1658142-cde9-460b-8f5d-52032d7796f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LadderMovement"",
            ""id"": ""ba725a58-afc4-4cf2-91ef-747f2c52a3e5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6d3fa3b2-3f18-4b95-b6e6-865c9a13e4c9"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Value"",
                    ""id"": ""4fffb34d-c1b7-494c-9c69-e6a415db2f5e"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""37c9238a-2091-44ed-b6d2-ea817b028399"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cd4b802e-f061-480e-831d-b73ba1c58a09"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""831b8a46-fd83-46b8-8167-d7f674f3ff99"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2298fbe1-feef-4af6-88b2-5694b568db59"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": ""Clamp"",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ae15968e-7944-451a-9654-b1e57c3ea97f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""630b3ce3-cce6-4827-8150-ca51ace7217b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ca6cc5da-5652-4212-b130-03a5a714f56d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MiscMovement"",
            ""id"": ""0d16a910-b506-4524-b6f4-77e892d7a811"",
            ""actions"": [
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""46cd9f62-b022-4590-8390-cc5f9388afb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TryClimb"",
                    ""type"": ""Button"",
                    ""id"": ""02709779-9bab-4d0f-a6b1-4d84c8ba36a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2de5fa9a-380a-4526-b9fb-9ae79ed76f29"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""379df6f6-b3cf-440e-8f42-e04476596df6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TryClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bb2f18a-865c-424c-b2cd-73c29bd6c929"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TryClimb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryNavigation"",
            ""id"": ""4d1871e3-a185-4da5-8521-5d64701179e3"",
            ""actions"": [
                {
                    ""name"": ""Select0"",
                    ""type"": ""Button"",
                    ""id"": ""068f9ba7-e6d2-423f-8449-9e612119c176"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select1"",
                    ""type"": ""Button"",
                    ""id"": ""da8df564-161a-4059-b90a-ac5bdb9b853f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select2"",
                    ""type"": ""Button"",
                    ""id"": ""4e0e309f-f381-4c41-ab1a-d7eea3d5a7f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select3"",
                    ""type"": ""Button"",
                    ""id"": ""e1bbb70d-57b8-47a6-857a-b7cd2730c02b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select4"",
                    ""type"": ""Button"",
                    ""id"": ""2d70effe-c7a7-45fc-a86f-13028dc8c611"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select5"",
                    ""type"": ""Button"",
                    ""id"": ""0dedf070-536e-4a8a-a3f7-050516ba2115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select6"",
                    ""type"": ""Button"",
                    ""id"": ""d8052775-0e89-4717-896c-341e17b8a994"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select7"",
                    ""type"": ""Button"",
                    ""id"": ""383c62cc-ade2-4457-b432-664bcef92909"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select8"",
                    ""type"": ""Button"",
                    ""id"": ""4b5e9084-e673-4297-8546-5ce7d0ccad9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select9"",
                    ""type"": ""Button"",
                    ""id"": ""dd6bc4c1-1cf4-480a-87e4-71804c696247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""b7bc4d17-5b29-48e4-9ac2-cdbb4e0bbbf7"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaec8975-2f36-417f-ba63-2c51f85951ea"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cac58d9-6647-4d4a-bdc2-b10144bbbfdc"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21cae940-58a4-4438-8bf7-8b2032a9f359"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""401d9864-fd5f-425c-93d4-6f72c0643af7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e53332c-8572-4a3f-896f-7470a5795fca"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3d44e20-3487-4fb1-bd29-ba9461b4e6e2"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d7b23f4-05b8-4add-8815-5e06c6e44cc3"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c735b5d-39ec-439d-989f-d04efd94d095"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8edad34-7b6f-4910-aafd-070e8109bb56"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a856b519-3730-4c42-88ed-df424429a511"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ccb29960-9bbb-4d29-8a8d-a77534987d25"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aa1593d8-218e-4122-89ad-a8d7eb8553e5"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7e43e4aa-ccf7-48d9-b050-fe3c07636f61"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""InventoryUtils"",
            ""id"": ""dfbb426f-cafb-44da-bdd4-c117f3dc732d"",
            ""actions"": [
                {
                    ""name"": ""ShowRecipes"",
                    ""type"": ""Button"",
                    ""id"": ""f49e97ac-46b4-4c36-a69c-8e6434e8af68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowUses"",
                    ""type"": ""Button"",
                    ""id"": ""bedc70f2-2f3a-484e-b388-82cf2c7463ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EditTag"",
                    ""type"": ""Button"",
                    ""id"": ""0864746b-9c4f-4d8e-b5e8-c336d387f6a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ce9198b-9427-4484-972b-357d5b23fdef"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowRecipes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38af0bc8-e34c-4033-8f03-09e3c4f5f3e0"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowUses"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c71d1a67-ecc7-4e4d-a76b-105dc8b4f8f3"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EditTag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MiscKeys"",
            ""id"": ""7b3fcf79-9838-47a1-97b8-06b3d6f39824"",
            ""actions"": [
                {
                    ""name"": ""ItemSearch"",
                    ""type"": ""Button"",
                    ""id"": ""52fd38a6-0cd5-4513-93db-ee81b2e73464"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""5c475558-e98b-4298-a797-e70ffd85cb49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuestBook"",
                    ""type"": ""Button"",
                    ""id"": ""40ffec9c-dab6-4b79-9d72-dd13aa1986ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlacementMode"",
                    ""type"": ""Button"",
                    ""id"": ""6457e67c-e59d-40bf-b93a-b9ab320374f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConduitOptions"",
                    ""type"": ""Button"",
                    ""id"": ""1d122680-509b-4c70-9a7b-32b11949095f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConduitPortView"",
                    ""type"": ""Button"",
                    ""id"": ""dc25925f-fffa-429f-abae-fdebd71ff619"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConduitView"",
                    ""type"": ""Button"",
                    ""id"": ""c95cd6ec-e45c-4f09-b597-583d23d3d67f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractTools"",
                    ""type"": ""Button"",
                    ""id"": ""897417ad-56fa-4132-9e96-a700b8f4ce48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowChat"",
                    ""type"": ""Button"",
                    ""id"": ""9a8b7d6d-0de4-4199-b40b-5a81be5e20c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""208db1aa-3817-45a6-b5e7-6463c412f43b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemSearch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8406ea29-1d7f-4c92-a72d-bbf501f6b2a0"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""327b1d6f-56ab-45c5-a56f-260b56daefb3"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuestBook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""1149609c-acf6-4a22-8c6a-90ffbcb92b3f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacementMode"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""eb01c747-9d36-4870-b9f0-03cfcc33e62c"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""c054873b-63f4-4163-9b71-b2be8636fb31"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacementMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9516feaa-173e-4ff8-89a7-74a8d554ab1d"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConduitOptions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b451f48e-50fb-4275-b870-d1bd7e24700e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConduitPortView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40a6cbd6-9cb8-4bb2-801b-919d8886f88d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConduitView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1eeebc87-9860-4923-afde-0f63fe371aa3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractTools"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdf62ed0-7622-4930-9b72-6187d66288f4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ToolBindings"",
            ""id"": ""6a787e22-73da-4278-8716-6f3afb48f675"",
            ""actions"": [
                {
                    ""name"": ""SwitchMode"",
                    ""type"": ""Button"",
                    ""id"": ""95525401-e420-4d81-8733-7616e0d439cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoSelect"",
                    ""type"": ""Button"",
                    ""id"": ""30102cdd-a6c7-4dfd-95d1-7d6f4d86860a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenLoadout"",
                    ""type"": ""Button"",
                    ""id"": ""ba31cfce-8a6a-4f28-958b-3ff54a432eb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLoadout"",
                    ""type"": ""Button"",
                    ""id"": ""376900dc-1b1e-459c-9b4c-19b7987c91d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""becc79f9-17c6-44fa-aab6-16d670fe6e4f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6272301-ac9a-4b5c-9448-699d78d484c5"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""741dccc3-b4f2-4cfa-98b7-cdddf4cf9e01"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenLoadout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ee986ec-8f68-476a-a732-689e754d6fc3"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLoadout"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NodeNetworkUI"",
            ""id"": ""c514f9d2-84d4-407b-a6bb-6e78605d2e31"",
            ""actions"": [
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""9ee7fe80-3518-4c02-b038-b4fbce495bfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""3d569d44-e43c-4e36-9302-01246ea3d5a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b641f3e2-28b8-4d8e-9ce4-e6c79921f777"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""e5c2880a-938f-4230-97db-b38b15ae5906"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recenter"",
                    ""type"": ""Button"",
                    ""id"": ""34fcc616-9449-4ad6-a7a1-1d0f378bbf44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Create"",
                    ""type"": ""Button"",
                    ""id"": ""56c85c50-7748-426f-85f9-ff9b7075861b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""343e4962-e989-4932-a8cd-3d707c89ff5a"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be921367-3166-45c7-b096-ef7c4267d24a"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd1fdb9a-00c7-42b6-96ab-0ff9f9d804e8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45213a03-c21f-4e9d-a793-6b4459dd8f24"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""424fa93d-608f-4444-92aa-387da2572c53"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4ba81266-7fc7-46e8-ab3c-2bc533c9d63a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3b3a1d02-92a6-4076-bacc-03fb8e17760f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2b307e4a-af7f-4cd1-8b24-0c53304e4c18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bed74223-f1ef-4bcb-9232-3278f15ff4bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6f358977-fe8a-4d32-b320-83bb2cf4d8fa"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0c6f367-bbe2-4da8-837a-d96cc8966ed5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2c045e1-6927-4bd1-9224-b67bd129f775"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50c9cb91-06c2-4dd0-8308-e43040376c3c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78d9763b-f480-450c-915e-cea8287290d9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2431ec73-4e6b-4ee5-8f61-7bd09639e9cf"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed8a007f-bc30-438e-a4fd-83ba03a4111a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c19618e2-9bf9-4a38-bfc2-73b89b8fef15"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Create"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TextChatKeys"",
            ""id"": ""81cdbe75-84a4-4fb2-96f8-eb3ff77a1ecb"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""43843b7c-4316-4678-af8a-1c28cbe48546"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fill"",
                    ""type"": ""Button"",
                    ""id"": ""e928feb6-7c93-4d3d-85b9-978279721b49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""d0387e8b-9a8e-463c-8b4f-67a70150669d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""d1dfb356-d423-4595-a56a-27f067722747"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SendMessage"",
                    ""type"": ""Button"",
                    ""id"": ""f1e966dc-5d0d-4ed3-abe6-1a138ecb7050"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7251c460-ed25-461a-8b43-58ac8b803183"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea2fd025-3bc2-4e4e-8ebf-74f8e5b00e9f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7075d6ce-0457-4319-bcf5-7f29b392f844"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5f0e072e-e833-4b4d-8ca8-209f6fd1ea3a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cac6eb02-0b29-4183-b2a8-c3d0b95d66ba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""37f44bb5-fabb-450b-965c-ed0fa9bd748a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe3e230d-e4bb-4f6e-bee6-353f0e78620d"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d284b58b-c75a-4cd7-8b8d-20d38594e42d"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cdc055aa-6941-442a-91ed-f78554eadd20"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendMessage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CanvasController"",
            ""id"": ""79a7fffd-a088-4393-836a-7e48ee406503"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""4fd7fec2-4b5d-459e-9c2b-3139dcd888f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8929a8c6-5206-4c98-b236-eb0b662b6feb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // StandardMovement
        m_StandardMovement = asset.FindActionMap("StandardMovement", throwIfNotFound: true);
        m_StandardMovement_Move = m_StandardMovement.FindAction("Move", throwIfNotFound: true);
        m_StandardMovement_Jump = m_StandardMovement.FindAction("Jump", throwIfNotFound: true);
        m_StandardMovement_Teleport = m_StandardMovement.FindAction("Teleport", throwIfNotFound: true);
        m_StandardMovement_Down = m_StandardMovement.FindAction("Down", throwIfNotFound: true);
        // FlightMovement
        m_FlightMovement = asset.FindActionMap("FlightMovement", throwIfNotFound: true);
        m_FlightMovement_Move = m_FlightMovement.FindAction("Move", throwIfNotFound: true);
        // LadderMovement
        m_LadderMovement = asset.FindActionMap("LadderMovement", throwIfNotFound: true);
        m_LadderMovement_Move = m_LadderMovement.FindAction("Move", throwIfNotFound: true);
        m_LadderMovement_Escape = m_LadderMovement.FindAction("Escape", throwIfNotFound: true);
        // MiscMovement
        m_MiscMovement = asset.FindActionMap("MiscMovement", throwIfNotFound: true);
        m_MiscMovement_Teleport = m_MiscMovement.FindAction("Teleport", throwIfNotFound: true);
        m_MiscMovement_TryClimb = m_MiscMovement.FindAction("TryClimb", throwIfNotFound: true);
        // InventoryNavigation
        m_InventoryNavigation = asset.FindActionMap("InventoryNavigation", throwIfNotFound: true);
        m_InventoryNavigation_Select0 = m_InventoryNavigation.FindAction("Select0", throwIfNotFound: true);
        m_InventoryNavigation_Select1 = m_InventoryNavigation.FindAction("Select1", throwIfNotFound: true);
        m_InventoryNavigation_Select2 = m_InventoryNavigation.FindAction("Select2", throwIfNotFound: true);
        m_InventoryNavigation_Select3 = m_InventoryNavigation.FindAction("Select3", throwIfNotFound: true);
        m_InventoryNavigation_Select4 = m_InventoryNavigation.FindAction("Select4", throwIfNotFound: true);
        m_InventoryNavigation_Select5 = m_InventoryNavigation.FindAction("Select5", throwIfNotFound: true);
        m_InventoryNavigation_Select6 = m_InventoryNavigation.FindAction("Select6", throwIfNotFound: true);
        m_InventoryNavigation_Select7 = m_InventoryNavigation.FindAction("Select7", throwIfNotFound: true);
        m_InventoryNavigation_Select8 = m_InventoryNavigation.FindAction("Select8", throwIfNotFound: true);
        m_InventoryNavigation_Select9 = m_InventoryNavigation.FindAction("Select9", throwIfNotFound: true);
        m_InventoryNavigation_Scroll = m_InventoryNavigation.FindAction("Scroll", throwIfNotFound: true);
        // InventoryUtils
        m_InventoryUtils = asset.FindActionMap("InventoryUtils", throwIfNotFound: true);
        m_InventoryUtils_ShowRecipes = m_InventoryUtils.FindAction("ShowRecipes", throwIfNotFound: true);
        m_InventoryUtils_ShowUses = m_InventoryUtils.FindAction("ShowUses", throwIfNotFound: true);
        m_InventoryUtils_EditTag = m_InventoryUtils.FindAction("EditTag", throwIfNotFound: true);
        // MiscKeys
        m_MiscKeys = asset.FindActionMap("MiscKeys", throwIfNotFound: true);
        m_MiscKeys_ItemSearch = m_MiscKeys.FindAction("ItemSearch", throwIfNotFound: true);
        m_MiscKeys_Inventory = m_MiscKeys.FindAction("Inventory", throwIfNotFound: true);
        m_MiscKeys_QuestBook = m_MiscKeys.FindAction("QuestBook", throwIfNotFound: true);
        m_MiscKeys_PlacementMode = m_MiscKeys.FindAction("PlacementMode", throwIfNotFound: true);
        m_MiscKeys_ConduitOptions = m_MiscKeys.FindAction("ConduitOptions", throwIfNotFound: true);
        m_MiscKeys_ConduitPortView = m_MiscKeys.FindAction("ConduitPortView", throwIfNotFound: true);
        m_MiscKeys_ConduitView = m_MiscKeys.FindAction("ConduitView", throwIfNotFound: true);
        m_MiscKeys_InteractTools = m_MiscKeys.FindAction("InteractTools", throwIfNotFound: true);
        m_MiscKeys_ShowChat = m_MiscKeys.FindAction("ShowChat", throwIfNotFound: true);
        // ToolBindings
        m_ToolBindings = asset.FindActionMap("ToolBindings", throwIfNotFound: true);
        m_ToolBindings_SwitchMode = m_ToolBindings.FindAction("SwitchMode", throwIfNotFound: true);
        m_ToolBindings_AutoSelect = m_ToolBindings.FindAction("AutoSelect", throwIfNotFound: true);
        m_ToolBindings_OpenLoadout = m_ToolBindings.FindAction("OpenLoadout", throwIfNotFound: true);
        m_ToolBindings_SwitchLoadout = m_ToolBindings.FindAction("SwitchLoadout", throwIfNotFound: true);
        // NodeNetworkUI
        m_NodeNetworkUI = asset.FindActionMap("NodeNetworkUI", throwIfNotFound: true);
        m_NodeNetworkUI_Delete = m_NodeNetworkUI.FindAction("Delete", throwIfNotFound: true);
        m_NodeNetworkUI_Open = m_NodeNetworkUI.FindAction("Open", throwIfNotFound: true);
        m_NodeNetworkUI_Move = m_NodeNetworkUI.FindAction("Move", throwIfNotFound: true);
        m_NodeNetworkUI_Deselect = m_NodeNetworkUI.FindAction("Deselect", throwIfNotFound: true);
        m_NodeNetworkUI_Recenter = m_NodeNetworkUI.FindAction("Recenter", throwIfNotFound: true);
        m_NodeNetworkUI_Create = m_NodeNetworkUI.FindAction("Create", throwIfNotFound: true);
        // TextChatKeys
        m_TextChatKeys = asset.FindActionMap("TextChatKeys", throwIfNotFound: true);
        m_TextChatKeys_Exit = m_TextChatKeys.FindAction("Exit", throwIfNotFound: true);
        m_TextChatKeys_Fill = m_TextChatKeys.FindAction("Fill", throwIfNotFound: true);
        m_TextChatKeys_Navigate = m_TextChatKeys.FindAction("Navigate", throwIfNotFound: true);
        m_TextChatKeys_Scroll = m_TextChatKeys.FindAction("Scroll", throwIfNotFound: true);
        m_TextChatKeys_SendMessage = m_TextChatKeys.FindAction("SendMessage", throwIfNotFound: true);
        // CanvasController
        m_CanvasController = asset.FindActionMap("CanvasController", throwIfNotFound: true);
        m_CanvasController_Exit = m_CanvasController.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StandardMovement
    private readonly InputActionMap m_StandardMovement;
    private List<IStandardMovementActions> m_StandardMovementActionsCallbackInterfaces = new List<IStandardMovementActions>();
    private readonly InputAction m_StandardMovement_Move;
    private readonly InputAction m_StandardMovement_Jump;
    private readonly InputAction m_StandardMovement_Teleport;
    private readonly InputAction m_StandardMovement_Down;
    public struct StandardMovementActions
    {
        private @InputActions m_Wrapper;
        public StandardMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_StandardMovement_Move;
        public InputAction @Jump => m_Wrapper.m_StandardMovement_Jump;
        public InputAction @Teleport => m_Wrapper.m_StandardMovement_Teleport;
        public InputAction @Down => m_Wrapper.m_StandardMovement_Down;
        public InputActionMap Get() { return m_Wrapper.m_StandardMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandardMovementActions set) { return set.Get(); }
        public void AddCallbacks(IStandardMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IStandardMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IStandardMovementActions instance)
        {
            if (m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStandardMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_StandardMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StandardMovementActions @StandardMovement => new StandardMovementActions(this);

    // FlightMovement
    private readonly InputActionMap m_FlightMovement;
    private List<IFlightMovementActions> m_FlightMovementActionsCallbackInterfaces = new List<IFlightMovementActions>();
    private readonly InputAction m_FlightMovement_Move;
    public struct FlightMovementActions
    {
        private @InputActions m_Wrapper;
        public FlightMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FlightMovement_Move;
        public InputActionMap Get() { return m_Wrapper.m_FlightMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightMovementActions set) { return set.Get(); }
        public void AddCallbacks(IFlightMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_FlightMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlightMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFlightMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFlightMovementActions instance)
        {
            if (m_Wrapper.m_FlightMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlightMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_FlightMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlightMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlightMovementActions @FlightMovement => new FlightMovementActions(this);

    // LadderMovement
    private readonly InputActionMap m_LadderMovement;
    private List<ILadderMovementActions> m_LadderMovementActionsCallbackInterfaces = new List<ILadderMovementActions>();
    private readonly InputAction m_LadderMovement_Move;
    private readonly InputAction m_LadderMovement_Escape;
    public struct LadderMovementActions
    {
        private @InputActions m_Wrapper;
        public LadderMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_LadderMovement_Move;
        public InputAction @Escape => m_Wrapper.m_LadderMovement_Escape;
        public InputActionMap Get() { return m_Wrapper.m_LadderMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LadderMovementActions set) { return set.Get(); }
        public void AddCallbacks(ILadderMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ILadderMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ILadderMovementActions instance)
        {
            if (m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILadderMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_LadderMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LadderMovementActions @LadderMovement => new LadderMovementActions(this);

    // MiscMovement
    private readonly InputActionMap m_MiscMovement;
    private List<IMiscMovementActions> m_MiscMovementActionsCallbackInterfaces = new List<IMiscMovementActions>();
    private readonly InputAction m_MiscMovement_Teleport;
    private readonly InputAction m_MiscMovement_TryClimb;
    public struct MiscMovementActions
    {
        private @InputActions m_Wrapper;
        public MiscMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teleport => m_Wrapper.m_MiscMovement_Teleport;
        public InputAction @TryClimb => m_Wrapper.m_MiscMovement_TryClimb;
        public InputActionMap Get() { return m_Wrapper.m_MiscMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiscMovementActions set) { return set.Get(); }
        public void AddCallbacks(IMiscMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Add(instance);
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @TryClimb.started += instance.OnTryClimb;
            @TryClimb.performed += instance.OnTryClimb;
            @TryClimb.canceled += instance.OnTryClimb;
        }

        private void UnregisterCallbacks(IMiscMovementActions instance)
        {
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @TryClimb.started -= instance.OnTryClimb;
            @TryClimb.performed -= instance.OnTryClimb;
            @TryClimb.canceled -= instance.OnTryClimb;
        }

        public void RemoveCallbacks(IMiscMovementActions instance)
        {
            if (m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiscMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MiscMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiscMovementActions @MiscMovement => new MiscMovementActions(this);

    // InventoryNavigation
    private readonly InputActionMap m_InventoryNavigation;
    private List<IInventoryNavigationActions> m_InventoryNavigationActionsCallbackInterfaces = new List<IInventoryNavigationActions>();
    private readonly InputAction m_InventoryNavigation_Select0;
    private readonly InputAction m_InventoryNavigation_Select1;
    private readonly InputAction m_InventoryNavigation_Select2;
    private readonly InputAction m_InventoryNavigation_Select3;
    private readonly InputAction m_InventoryNavigation_Select4;
    private readonly InputAction m_InventoryNavigation_Select5;
    private readonly InputAction m_InventoryNavigation_Select6;
    private readonly InputAction m_InventoryNavigation_Select7;
    private readonly InputAction m_InventoryNavigation_Select8;
    private readonly InputAction m_InventoryNavigation_Select9;
    private readonly InputAction m_InventoryNavigation_Scroll;
    public struct InventoryNavigationActions
    {
        private @InputActions m_Wrapper;
        public InventoryNavigationActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select0 => m_Wrapper.m_InventoryNavigation_Select0;
        public InputAction @Select1 => m_Wrapper.m_InventoryNavigation_Select1;
        public InputAction @Select2 => m_Wrapper.m_InventoryNavigation_Select2;
        public InputAction @Select3 => m_Wrapper.m_InventoryNavigation_Select3;
        public InputAction @Select4 => m_Wrapper.m_InventoryNavigation_Select4;
        public InputAction @Select5 => m_Wrapper.m_InventoryNavigation_Select5;
        public InputAction @Select6 => m_Wrapper.m_InventoryNavigation_Select6;
        public InputAction @Select7 => m_Wrapper.m_InventoryNavigation_Select7;
        public InputAction @Select8 => m_Wrapper.m_InventoryNavigation_Select8;
        public InputAction @Select9 => m_Wrapper.m_InventoryNavigation_Select9;
        public InputAction @Scroll => m_Wrapper.m_InventoryNavigation_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_InventoryNavigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryNavigationActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryNavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryNavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryNavigationActionsCallbackInterfaces.Add(instance);
            @Select0.started += instance.OnSelect0;
            @Select0.performed += instance.OnSelect0;
            @Select0.canceled += instance.OnSelect0;
            @Select1.started += instance.OnSelect1;
            @Select1.performed += instance.OnSelect1;
            @Select1.canceled += instance.OnSelect1;
            @Select2.started += instance.OnSelect2;
            @Select2.performed += instance.OnSelect2;
            @Select2.canceled += instance.OnSelect2;
            @Select3.started += instance.OnSelect3;
            @Select3.performed += instance.OnSelect3;
            @Select3.canceled += instance.OnSelect3;
            @Select4.started += instance.OnSelect4;
            @Select4.performed += instance.OnSelect4;
            @Select4.canceled += instance.OnSelect4;
            @Select5.started += instance.OnSelect5;
            @Select5.performed += instance.OnSelect5;
            @Select5.canceled += instance.OnSelect5;
            @Select6.started += instance.OnSelect6;
            @Select6.performed += instance.OnSelect6;
            @Select6.canceled += instance.OnSelect6;
            @Select7.started += instance.OnSelect7;
            @Select7.performed += instance.OnSelect7;
            @Select7.canceled += instance.OnSelect7;
            @Select8.started += instance.OnSelect8;
            @Select8.performed += instance.OnSelect8;
            @Select8.canceled += instance.OnSelect8;
            @Select9.started += instance.OnSelect9;
            @Select9.performed += instance.OnSelect9;
            @Select9.canceled += instance.OnSelect9;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IInventoryNavigationActions instance)
        {
            @Select0.started -= instance.OnSelect0;
            @Select0.performed -= instance.OnSelect0;
            @Select0.canceled -= instance.OnSelect0;
            @Select1.started -= instance.OnSelect1;
            @Select1.performed -= instance.OnSelect1;
            @Select1.canceled -= instance.OnSelect1;
            @Select2.started -= instance.OnSelect2;
            @Select2.performed -= instance.OnSelect2;
            @Select2.canceled -= instance.OnSelect2;
            @Select3.started -= instance.OnSelect3;
            @Select3.performed -= instance.OnSelect3;
            @Select3.canceled -= instance.OnSelect3;
            @Select4.started -= instance.OnSelect4;
            @Select4.performed -= instance.OnSelect4;
            @Select4.canceled -= instance.OnSelect4;
            @Select5.started -= instance.OnSelect5;
            @Select5.performed -= instance.OnSelect5;
            @Select5.canceled -= instance.OnSelect5;
            @Select6.started -= instance.OnSelect6;
            @Select6.performed -= instance.OnSelect6;
            @Select6.canceled -= instance.OnSelect6;
            @Select7.started -= instance.OnSelect7;
            @Select7.performed -= instance.OnSelect7;
            @Select7.canceled -= instance.OnSelect7;
            @Select8.started -= instance.OnSelect8;
            @Select8.performed -= instance.OnSelect8;
            @Select8.canceled -= instance.OnSelect8;
            @Select9.started -= instance.OnSelect9;
            @Select9.performed -= instance.OnSelect9;
            @Select9.canceled -= instance.OnSelect9;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IInventoryNavigationActions instance)
        {
            if (m_Wrapper.m_InventoryNavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryNavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryNavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryNavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryNavigationActions @InventoryNavigation => new InventoryNavigationActions(this);

    // InventoryUtils
    private readonly InputActionMap m_InventoryUtils;
    private List<IInventoryUtilsActions> m_InventoryUtilsActionsCallbackInterfaces = new List<IInventoryUtilsActions>();
    private readonly InputAction m_InventoryUtils_ShowRecipes;
    private readonly InputAction m_InventoryUtils_ShowUses;
    private readonly InputAction m_InventoryUtils_EditTag;
    public struct InventoryUtilsActions
    {
        private @InputActions m_Wrapper;
        public InventoryUtilsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowRecipes => m_Wrapper.m_InventoryUtils_ShowRecipes;
        public InputAction @ShowUses => m_Wrapper.m_InventoryUtils_ShowUses;
        public InputAction @EditTag => m_Wrapper.m_InventoryUtils_EditTag;
        public InputActionMap Get() { return m_Wrapper.m_InventoryUtils; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryUtilsActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryUtilsActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryUtilsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryUtilsActionsCallbackInterfaces.Add(instance);
            @ShowRecipes.started += instance.OnShowRecipes;
            @ShowRecipes.performed += instance.OnShowRecipes;
            @ShowRecipes.canceled += instance.OnShowRecipes;
            @ShowUses.started += instance.OnShowUses;
            @ShowUses.performed += instance.OnShowUses;
            @ShowUses.canceled += instance.OnShowUses;
            @EditTag.started += instance.OnEditTag;
            @EditTag.performed += instance.OnEditTag;
            @EditTag.canceled += instance.OnEditTag;
        }

        private void UnregisterCallbacks(IInventoryUtilsActions instance)
        {
            @ShowRecipes.started -= instance.OnShowRecipes;
            @ShowRecipes.performed -= instance.OnShowRecipes;
            @ShowRecipes.canceled -= instance.OnShowRecipes;
            @ShowUses.started -= instance.OnShowUses;
            @ShowUses.performed -= instance.OnShowUses;
            @ShowUses.canceled -= instance.OnShowUses;
            @EditTag.started -= instance.OnEditTag;
            @EditTag.performed -= instance.OnEditTag;
            @EditTag.canceled -= instance.OnEditTag;
        }

        public void RemoveCallbacks(IInventoryUtilsActions instance)
        {
            if (m_Wrapper.m_InventoryUtilsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryUtilsActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryUtilsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryUtilsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryUtilsActions @InventoryUtils => new InventoryUtilsActions(this);

    // MiscKeys
    private readonly InputActionMap m_MiscKeys;
    private List<IMiscKeysActions> m_MiscKeysActionsCallbackInterfaces = new List<IMiscKeysActions>();
    private readonly InputAction m_MiscKeys_ItemSearch;
    private readonly InputAction m_MiscKeys_Inventory;
    private readonly InputAction m_MiscKeys_QuestBook;
    private readonly InputAction m_MiscKeys_PlacementMode;
    private readonly InputAction m_MiscKeys_ConduitOptions;
    private readonly InputAction m_MiscKeys_ConduitPortView;
    private readonly InputAction m_MiscKeys_ConduitView;
    private readonly InputAction m_MiscKeys_InteractTools;
    private readonly InputAction m_MiscKeys_ShowChat;
    public struct MiscKeysActions
    {
        private @InputActions m_Wrapper;
        public MiscKeysActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ItemSearch => m_Wrapper.m_MiscKeys_ItemSearch;
        public InputAction @Inventory => m_Wrapper.m_MiscKeys_Inventory;
        public InputAction @QuestBook => m_Wrapper.m_MiscKeys_QuestBook;
        public InputAction @PlacementMode => m_Wrapper.m_MiscKeys_PlacementMode;
        public InputAction @ConduitOptions => m_Wrapper.m_MiscKeys_ConduitOptions;
        public InputAction @ConduitPortView => m_Wrapper.m_MiscKeys_ConduitPortView;
        public InputAction @ConduitView => m_Wrapper.m_MiscKeys_ConduitView;
        public InputAction @InteractTools => m_Wrapper.m_MiscKeys_InteractTools;
        public InputAction @ShowChat => m_Wrapper.m_MiscKeys_ShowChat;
        public InputActionMap Get() { return m_Wrapper.m_MiscKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiscKeysActions set) { return set.Get(); }
        public void AddCallbacks(IMiscKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_MiscKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiscKeysActionsCallbackInterfaces.Add(instance);
            @ItemSearch.started += instance.OnItemSearch;
            @ItemSearch.performed += instance.OnItemSearch;
            @ItemSearch.canceled += instance.OnItemSearch;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @QuestBook.started += instance.OnQuestBook;
            @QuestBook.performed += instance.OnQuestBook;
            @QuestBook.canceled += instance.OnQuestBook;
            @PlacementMode.started += instance.OnPlacementMode;
            @PlacementMode.performed += instance.OnPlacementMode;
            @PlacementMode.canceled += instance.OnPlacementMode;
            @ConduitOptions.started += instance.OnConduitOptions;
            @ConduitOptions.performed += instance.OnConduitOptions;
            @ConduitOptions.canceled += instance.OnConduitOptions;
            @ConduitPortView.started += instance.OnConduitPortView;
            @ConduitPortView.performed += instance.OnConduitPortView;
            @ConduitPortView.canceled += instance.OnConduitPortView;
            @ConduitView.started += instance.OnConduitView;
            @ConduitView.performed += instance.OnConduitView;
            @ConduitView.canceled += instance.OnConduitView;
            @InteractTools.started += instance.OnInteractTools;
            @InteractTools.performed += instance.OnInteractTools;
            @InteractTools.canceled += instance.OnInteractTools;
            @ShowChat.started += instance.OnShowChat;
            @ShowChat.performed += instance.OnShowChat;
            @ShowChat.canceled += instance.OnShowChat;
        }

        private void UnregisterCallbacks(IMiscKeysActions instance)
        {
            @ItemSearch.started -= instance.OnItemSearch;
            @ItemSearch.performed -= instance.OnItemSearch;
            @ItemSearch.canceled -= instance.OnItemSearch;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @QuestBook.started -= instance.OnQuestBook;
            @QuestBook.performed -= instance.OnQuestBook;
            @QuestBook.canceled -= instance.OnQuestBook;
            @PlacementMode.started -= instance.OnPlacementMode;
            @PlacementMode.performed -= instance.OnPlacementMode;
            @PlacementMode.canceled -= instance.OnPlacementMode;
            @ConduitOptions.started -= instance.OnConduitOptions;
            @ConduitOptions.performed -= instance.OnConduitOptions;
            @ConduitOptions.canceled -= instance.OnConduitOptions;
            @ConduitPortView.started -= instance.OnConduitPortView;
            @ConduitPortView.performed -= instance.OnConduitPortView;
            @ConduitPortView.canceled -= instance.OnConduitPortView;
            @ConduitView.started -= instance.OnConduitView;
            @ConduitView.performed -= instance.OnConduitView;
            @ConduitView.canceled -= instance.OnConduitView;
            @InteractTools.started -= instance.OnInteractTools;
            @InteractTools.performed -= instance.OnInteractTools;
            @InteractTools.canceled -= instance.OnInteractTools;
            @ShowChat.started -= instance.OnShowChat;
            @ShowChat.performed -= instance.OnShowChat;
            @ShowChat.canceled -= instance.OnShowChat;
        }

        public void RemoveCallbacks(IMiscKeysActions instance)
        {
            if (m_Wrapper.m_MiscKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiscKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_MiscKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiscKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiscKeysActions @MiscKeys => new MiscKeysActions(this);

    // ToolBindings
    private readonly InputActionMap m_ToolBindings;
    private List<IToolBindingsActions> m_ToolBindingsActionsCallbackInterfaces = new List<IToolBindingsActions>();
    private readonly InputAction m_ToolBindings_SwitchMode;
    private readonly InputAction m_ToolBindings_AutoSelect;
    private readonly InputAction m_ToolBindings_OpenLoadout;
    private readonly InputAction m_ToolBindings_SwitchLoadout;
    public struct ToolBindingsActions
    {
        private @InputActions m_Wrapper;
        public ToolBindingsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchMode => m_Wrapper.m_ToolBindings_SwitchMode;
        public InputAction @AutoSelect => m_Wrapper.m_ToolBindings_AutoSelect;
        public InputAction @OpenLoadout => m_Wrapper.m_ToolBindings_OpenLoadout;
        public InputAction @SwitchLoadout => m_Wrapper.m_ToolBindings_SwitchLoadout;
        public InputActionMap Get() { return m_Wrapper.m_ToolBindings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolBindingsActions set) { return set.Get(); }
        public void AddCallbacks(IToolBindingsActions instance)
        {
            if (instance == null || m_Wrapper.m_ToolBindingsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToolBindingsActionsCallbackInterfaces.Add(instance);
            @SwitchMode.started += instance.OnSwitchMode;
            @SwitchMode.performed += instance.OnSwitchMode;
            @SwitchMode.canceled += instance.OnSwitchMode;
            @AutoSelect.started += instance.OnAutoSelect;
            @AutoSelect.performed += instance.OnAutoSelect;
            @AutoSelect.canceled += instance.OnAutoSelect;
            @OpenLoadout.started += instance.OnOpenLoadout;
            @OpenLoadout.performed += instance.OnOpenLoadout;
            @OpenLoadout.canceled += instance.OnOpenLoadout;
            @SwitchLoadout.started += instance.OnSwitchLoadout;
            @SwitchLoadout.performed += instance.OnSwitchLoadout;
            @SwitchLoadout.canceled += instance.OnSwitchLoadout;
        }

        private void UnregisterCallbacks(IToolBindingsActions instance)
        {
            @SwitchMode.started -= instance.OnSwitchMode;
            @SwitchMode.performed -= instance.OnSwitchMode;
            @SwitchMode.canceled -= instance.OnSwitchMode;
            @AutoSelect.started -= instance.OnAutoSelect;
            @AutoSelect.performed -= instance.OnAutoSelect;
            @AutoSelect.canceled -= instance.OnAutoSelect;
            @OpenLoadout.started -= instance.OnOpenLoadout;
            @OpenLoadout.performed -= instance.OnOpenLoadout;
            @OpenLoadout.canceled -= instance.OnOpenLoadout;
            @SwitchLoadout.started -= instance.OnSwitchLoadout;
            @SwitchLoadout.performed -= instance.OnSwitchLoadout;
            @SwitchLoadout.canceled -= instance.OnSwitchLoadout;
        }

        public void RemoveCallbacks(IToolBindingsActions instance)
        {
            if (m_Wrapper.m_ToolBindingsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToolBindingsActions instance)
        {
            foreach (var item in m_Wrapper.m_ToolBindingsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToolBindingsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToolBindingsActions @ToolBindings => new ToolBindingsActions(this);

    // NodeNetworkUI
    private readonly InputActionMap m_NodeNetworkUI;
    private List<INodeNetworkUIActions> m_NodeNetworkUIActionsCallbackInterfaces = new List<INodeNetworkUIActions>();
    private readonly InputAction m_NodeNetworkUI_Delete;
    private readonly InputAction m_NodeNetworkUI_Open;
    private readonly InputAction m_NodeNetworkUI_Move;
    private readonly InputAction m_NodeNetworkUI_Deselect;
    private readonly InputAction m_NodeNetworkUI_Recenter;
    private readonly InputAction m_NodeNetworkUI_Create;
    public struct NodeNetworkUIActions
    {
        private @InputActions m_Wrapper;
        public NodeNetworkUIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Delete => m_Wrapper.m_NodeNetworkUI_Delete;
        public InputAction @Open => m_Wrapper.m_NodeNetworkUI_Open;
        public InputAction @Move => m_Wrapper.m_NodeNetworkUI_Move;
        public InputAction @Deselect => m_Wrapper.m_NodeNetworkUI_Deselect;
        public InputAction @Recenter => m_Wrapper.m_NodeNetworkUI_Recenter;
        public InputAction @Create => m_Wrapper.m_NodeNetworkUI_Create;
        public InputActionMap Get() { return m_Wrapper.m_NodeNetworkUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NodeNetworkUIActions set) { return set.Get(); }
        public void AddCallbacks(INodeNetworkUIActions instance)
        {
            if (instance == null || m_Wrapper.m_NodeNetworkUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NodeNetworkUIActionsCallbackInterfaces.Add(instance);
            @Delete.started += instance.OnDelete;
            @Delete.performed += instance.OnDelete;
            @Delete.canceled += instance.OnDelete;
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
            @Recenter.started += instance.OnRecenter;
            @Recenter.performed += instance.OnRecenter;
            @Recenter.canceled += instance.OnRecenter;
            @Create.started += instance.OnCreate;
            @Create.performed += instance.OnCreate;
            @Create.canceled += instance.OnCreate;
        }

        private void UnregisterCallbacks(INodeNetworkUIActions instance)
        {
            @Delete.started -= instance.OnDelete;
            @Delete.performed -= instance.OnDelete;
            @Delete.canceled -= instance.OnDelete;
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
            @Recenter.started -= instance.OnRecenter;
            @Recenter.performed -= instance.OnRecenter;
            @Recenter.canceled -= instance.OnRecenter;
            @Create.started -= instance.OnCreate;
            @Create.performed -= instance.OnCreate;
            @Create.canceled -= instance.OnCreate;
        }

        public void RemoveCallbacks(INodeNetworkUIActions instance)
        {
            if (m_Wrapper.m_NodeNetworkUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INodeNetworkUIActions instance)
        {
            foreach (var item in m_Wrapper.m_NodeNetworkUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NodeNetworkUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NodeNetworkUIActions @NodeNetworkUI => new NodeNetworkUIActions(this);

    // TextChatKeys
    private readonly InputActionMap m_TextChatKeys;
    private List<ITextChatKeysActions> m_TextChatKeysActionsCallbackInterfaces = new List<ITextChatKeysActions>();
    private readonly InputAction m_TextChatKeys_Exit;
    private readonly InputAction m_TextChatKeys_Fill;
    private readonly InputAction m_TextChatKeys_Navigate;
    private readonly InputAction m_TextChatKeys_Scroll;
    private readonly InputAction m_TextChatKeys_SendMessage;
    public struct TextChatKeysActions
    {
        private @InputActions m_Wrapper;
        public TextChatKeysActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_TextChatKeys_Exit;
        public InputAction @Fill => m_Wrapper.m_TextChatKeys_Fill;
        public InputAction @Navigate => m_Wrapper.m_TextChatKeys_Navigate;
        public InputAction @Scroll => m_Wrapper.m_TextChatKeys_Scroll;
        public InputAction @SendMessage => m_Wrapper.m_TextChatKeys_SendMessage;
        public InputActionMap Get() { return m_Wrapper.m_TextChatKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TextChatKeysActions set) { return set.Get(); }
        public void AddCallbacks(ITextChatKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_TextChatKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TextChatKeysActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @Fill.started += instance.OnFill;
            @Fill.performed += instance.OnFill;
            @Fill.canceled += instance.OnFill;
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @SendMessage.started += instance.OnSendMessage;
            @SendMessage.performed += instance.OnSendMessage;
            @SendMessage.canceled += instance.OnSendMessage;
        }

        private void UnregisterCallbacks(ITextChatKeysActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @Fill.started -= instance.OnFill;
            @Fill.performed -= instance.OnFill;
            @Fill.canceled -= instance.OnFill;
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @SendMessage.started -= instance.OnSendMessage;
            @SendMessage.performed -= instance.OnSendMessage;
            @SendMessage.canceled -= instance.OnSendMessage;
        }

        public void RemoveCallbacks(ITextChatKeysActions instance)
        {
            if (m_Wrapper.m_TextChatKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITextChatKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_TextChatKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TextChatKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TextChatKeysActions @TextChatKeys => new TextChatKeysActions(this);

    // CanvasController
    private readonly InputActionMap m_CanvasController;
    private List<ICanvasControllerActions> m_CanvasControllerActionsCallbackInterfaces = new List<ICanvasControllerActions>();
    private readonly InputAction m_CanvasController_Exit;
    public struct CanvasControllerActions
    {
        private @InputActions m_Wrapper;
        public CanvasControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_CanvasController_Exit;
        public InputActionMap Get() { return m_Wrapper.m_CanvasController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CanvasControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICanvasControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CanvasControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CanvasControllerActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(ICanvasControllerActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(ICanvasControllerActions instance)
        {
            if (m_Wrapper.m_CanvasControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICanvasControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CanvasControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CanvasControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CanvasControllerActions @CanvasController => new CanvasControllerActions(this);
    public interface IStandardMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface IFlightMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ILadderMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IMiscMovementActions
    {
        void OnTeleport(InputAction.CallbackContext context);
        void OnTryClimb(InputAction.CallbackContext context);
    }
    public interface IInventoryNavigationActions
    {
        void OnSelect0(InputAction.CallbackContext context);
        void OnSelect1(InputAction.CallbackContext context);
        void OnSelect2(InputAction.CallbackContext context);
        void OnSelect3(InputAction.CallbackContext context);
        void OnSelect4(InputAction.CallbackContext context);
        void OnSelect5(InputAction.CallbackContext context);
        void OnSelect6(InputAction.CallbackContext context);
        void OnSelect7(InputAction.CallbackContext context);
        void OnSelect8(InputAction.CallbackContext context);
        void OnSelect9(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
    public interface IInventoryUtilsActions
    {
        void OnShowRecipes(InputAction.CallbackContext context);
        void OnShowUses(InputAction.CallbackContext context);
        void OnEditTag(InputAction.CallbackContext context);
    }
    public interface IMiscKeysActions
    {
        void OnItemSearch(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnQuestBook(InputAction.CallbackContext context);
        void OnPlacementMode(InputAction.CallbackContext context);
        void OnConduitOptions(InputAction.CallbackContext context);
        void OnConduitPortView(InputAction.CallbackContext context);
        void OnConduitView(InputAction.CallbackContext context);
        void OnInteractTools(InputAction.CallbackContext context);
        void OnShowChat(InputAction.CallbackContext context);
    }
    public interface IToolBindingsActions
    {
        void OnSwitchMode(InputAction.CallbackContext context);
        void OnAutoSelect(InputAction.CallbackContext context);
        void OnOpenLoadout(InputAction.CallbackContext context);
        void OnSwitchLoadout(InputAction.CallbackContext context);
    }
    public interface INodeNetworkUIActions
    {
        void OnDelete(InputAction.CallbackContext context);
        void OnOpen(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnRecenter(InputAction.CallbackContext context);
        void OnCreate(InputAction.CallbackContext context);
    }
    public interface ITextChatKeysActions
    {
        void OnExit(InputAction.CallbackContext context);
        void OnFill(InputAction.CallbackContext context);
        void OnNavigate(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnSendMessage(InputAction.CallbackContext context);
    }
    public interface ICanvasControllerActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
