//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Misc/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""StandardMovement"",
            ""id"": ""7768c5e0-8ba9-46ff-8f47-7c607b13eee0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cfb5b6ef-cc2a-4235-a7f8-4742c513d387"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fca90552-aec5-429f-9c30-ddcc638d08e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""9e5d4ec9-9eb8-4ad7-8ff3-066a90eea542"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""01b673a6-048d-4e1c-bfa5-52a42db4d36e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54a2bf0c-ee44-486a-aaec-617ee85026aa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8245de48-4285-40b8-aa97-e37b99b3c8a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9297366-a59c-4adf-8694-4fab79f8e242"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""81329860-ec99-4414-a58b-f82dff8503f6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5c0b8185-fec8-458a-b279-f6f85dd414c2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e4f273c3-db16-4fb9-95ac-fd050c638987"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CreativeMovement"",
            ""id"": ""ce5c64b6-443c-4fd9-a5ab-ba6029866e86"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b23de7e5-01bc-43b8-9b04-eddfa69ffffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""387b9774-6a15-47f5-86eb-8f196187b078"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LadderMovement"",
            ""id"": ""ba725a58-afc4-4cf2-91ef-747f2c52a3e5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6d3fa3b2-3f18-4b95-b6e6-865c9a13e4c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45c7e3d6-1028-411b-b6ca-a02c1d73ef87"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MiscMovement"",
            ""id"": ""0d16a910-b506-4524-b6f4-77e892d7a811"",
            ""actions"": [
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""46cd9f62-b022-4590-8390-cc5f9388afb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2de5fa9a-380a-4526-b9fb-9ae79ed76f29"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // StandardMovement
        m_StandardMovement = asset.FindActionMap("StandardMovement", throwIfNotFound: true);
        m_StandardMovement_Move = m_StandardMovement.FindAction("Move", throwIfNotFound: true);
        m_StandardMovement_Jump = m_StandardMovement.FindAction("Jump", throwIfNotFound: true);
        m_StandardMovement_Teleport = m_StandardMovement.FindAction("Teleport", throwIfNotFound: true);
        m_StandardMovement_Down = m_StandardMovement.FindAction("Down", throwIfNotFound: true);
        // CreativeMovement
        m_CreativeMovement = asset.FindActionMap("CreativeMovement", throwIfNotFound: true);
        m_CreativeMovement_Newaction = m_CreativeMovement.FindAction("New action", throwIfNotFound: true);
        // LadderMovement
        m_LadderMovement = asset.FindActionMap("LadderMovement", throwIfNotFound: true);
        m_LadderMovement_Newaction = m_LadderMovement.FindAction("New action", throwIfNotFound: true);
        // MiscMovement
        m_MiscMovement = asset.FindActionMap("MiscMovement", throwIfNotFound: true);
        m_MiscMovement_Teleport = m_MiscMovement.FindAction("Teleport", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StandardMovement
    private readonly InputActionMap m_StandardMovement;
    private List<IStandardMovementActions> m_StandardMovementActionsCallbackInterfaces = new List<IStandardMovementActions>();
    private readonly InputAction m_StandardMovement_Move;
    private readonly InputAction m_StandardMovement_Jump;
    private readonly InputAction m_StandardMovement_Teleport;
    private readonly InputAction m_StandardMovement_Down;
    public struct StandardMovementActions
    {
        private @InputActions m_Wrapper;
        public StandardMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_StandardMovement_Move;
        public InputAction @Jump => m_Wrapper.m_StandardMovement_Jump;
        public InputAction @Teleport => m_Wrapper.m_StandardMovement_Teleport;
        public InputAction @Down => m_Wrapper.m_StandardMovement_Down;
        public InputActionMap Get() { return m_Wrapper.m_StandardMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandardMovementActions set) { return set.Get(); }
        public void AddCallbacks(IStandardMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IStandardMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IStandardMovementActions instance)
        {
            if (m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStandardMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_StandardMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandardMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StandardMovementActions @StandardMovement => new StandardMovementActions(this);

    // CreativeMovement
    private readonly InputActionMap m_CreativeMovement;
    private List<ICreativeMovementActions> m_CreativeMovementActionsCallbackInterfaces = new List<ICreativeMovementActions>();
    private readonly InputAction m_CreativeMovement_Newaction;
    public struct CreativeMovementActions
    {
        private @InputActions m_Wrapper;
        public CreativeMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_CreativeMovement_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_CreativeMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreativeMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICreativeMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CreativeMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreativeMovementActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ICreativeMovementActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ICreativeMovementActions instance)
        {
            if (m_Wrapper.m_CreativeMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreativeMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CreativeMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreativeMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreativeMovementActions @CreativeMovement => new CreativeMovementActions(this);

    // LadderMovement
    private readonly InputActionMap m_LadderMovement;
    private List<ILadderMovementActions> m_LadderMovementActionsCallbackInterfaces = new List<ILadderMovementActions>();
    private readonly InputAction m_LadderMovement_Newaction;
    public struct LadderMovementActions
    {
        private @InputActions m_Wrapper;
        public LadderMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_LadderMovement_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_LadderMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LadderMovementActions set) { return set.Get(); }
        public void AddCallbacks(ILadderMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ILadderMovementActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ILadderMovementActions instance)
        {
            if (m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILadderMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_LadderMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LadderMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LadderMovementActions @LadderMovement => new LadderMovementActions(this);

    // MiscMovement
    private readonly InputActionMap m_MiscMovement;
    private List<IMiscMovementActions> m_MiscMovementActionsCallbackInterfaces = new List<IMiscMovementActions>();
    private readonly InputAction m_MiscMovement_Teleport;
    public struct MiscMovementActions
    {
        private @InputActions m_Wrapper;
        public MiscMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teleport => m_Wrapper.m_MiscMovement_Teleport;
        public InputActionMap Get() { return m_Wrapper.m_MiscMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiscMovementActions set) { return set.Get(); }
        public void AddCallbacks(IMiscMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Add(instance);
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
        }

        private void UnregisterCallbacks(IMiscMovementActions instance)
        {
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
        }

        public void RemoveCallbacks(IMiscMovementActions instance)
        {
            if (m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiscMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MiscMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiscMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiscMovementActions @MiscMovement => new MiscMovementActions(this);
    public interface IStandardMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface ICreativeMovementActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ILadderMovementActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IMiscMovementActions
    {
        void OnTeleport(InputAction.CallbackContext context);
    }
}
